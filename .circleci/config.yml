version: 2.1

workflows:
    version: 2
    build_and_test:
      jobs:
        - test:
            context: 
              - HEROKU
              - AWS
        - deploy:
            context: HEROKU
            requires:
              - test
            filters:
              branches:
                only: master
        - deploy-aws:
            context: AWS
            requires:
              - test
            filters:
              branches:
                only: master
        - smoke:
            context: HEROKU
            requires:
              - deploy
            filters:
              branches:
                only: master
        - smoke-aws:
            requires:
              - deploy
            filters:
              branches:
                only: master

commands:
  build_test_image:
    steps:
      - run: docker build --target base -t todos-test src/
  install_terraform:
    steps:
    - run: curl -sLo /tmp/terraform.zip https://releases.hashicorp.com/terraform/1.1.0/terraform_1.1.0_linux_amd64.zip
    - run: unzip /tmp/terraform.zip -d /tmp
    - run: mv /tmp/terraform ~/bin
    - run: export PATH="~/bin:$PATH"
  init_terraform:
    steps:
    - run: cd terraform && terraform init -input=false -backend-config="conn_str=$TERRAFORM_BACKEND"
  init_terraform_aws:
    steps:
    - run: cd terraformAws && terraform init -input=false
  plan_or_apply_terraform:
    parameters:
      command:
        description: the terraform command to execute
        type: string
    steps:
    - run: cd terraform && terraform <<parameters.command>> -var app_name=$HEROKU_APP_NAME -var jwt_secret=$JWT_SECRET -var cors_allowed_origins=$HEROKU_CORS_ALLOWED_ORIGINS -var environment=heroku
  plan_or_apply_terraform_aws:
    parameters:
      command:
        description: the terraform command to execute
        type: string
    steps:
    - run: cd terraformAws && terraform <<parameters.command>> -var jwt_secret=$JWT_SECRET -var cors_allowed_origins=$CORS_ALLOWED_ORIGINS -var environment=production -var new_relic_license_key=$NEW_RELIC_LICENSE_KEY -var honeybadger_api_key=$HONEYBADGER_API_KEY -var domain=$DOMAIN
  push_image_to_ecr:
    steps:
      - run: docker build --target release -t release -f src/Dockerfile src/
      - run: echo 'export AWS_ACCOUNT_ID=`aws sts get-caller-identity --query "Account" --output text`' >> $BASH_ENV
      - run: aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - run: docker tag release:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/todosbackend-production:latest
      - run: docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/todosbackend-production:latest
      - run: IMAGES_TO_DELETE=$( aws ecr list-images --repository-name todosbackend-production --filter "tagStatus=UNTAGGED" --query 'imageIds[*]' --output json ) && aws ecr batch-delete-image --repository-name todosbackend-production --image-ids "$IMAGES_TO_DELETE" || true
jobs:
  test:
    machine:
      image: ubuntu-2004:202111-01
    steps:
      - checkout
      - build_test_image
      - run: docker run --rm todos-test go test --race ./...
      - install_terraform
      - init_terraform
      - plan_or_apply_terraform:
          command: plan
      - init_terraform_aws
      - plan_or_apply_terraform_aws:
          command: plan
  deploy:
    machine:
      image: ubuntu-2004:202111-01
    steps:
      - checkout
      - install_terraform
      - run: heroku container:login
      - init_terraform
      - plan_or_apply_terraform:
          command: apply -input=false -auto-approve
      - run: docker build --target release -t todos-release -f src/Dockerfile src/
      - run: docker tag todos-release registry.heroku.com/$HEROKU_APP_NAME/web
      - run: docker push registry.heroku.com/$HEROKU_APP_NAME/web
      - run: heroku container:release --app $HEROKU_APP_NAME web
      - run: curl --data "deploy[environment]=heroku&deploy[local_username]=$HEROKU_EMAIL&deploy[revision]=$(git rev-parse --short HEAD)&api_key=$HONEYBADGER_API_KEY" "https://api.honeybadger.io/v1/deploys"
  deploy-aws:
    machine:
      image: ubuntu-2004:202111-01
    steps:
      - checkout
      - install_terraform
      - init_terraform_aws
      - plan_or_apply_terraform_aws:
          command: apply -target=aws_ecr_repository.todos_repository -input=false -auto-approve
      - push_image_to_ecr
      - plan_or_apply_terraform_aws:
          command: apply -input=false -auto-approve
      - run: curl --data "deploy[environment]=production&deploy[local_username]=$HEROKU_EMAIL&deploy[revision]=$(git rev-parse --short HEAD)&api_key=$HONEYBADGER_API_KEY" "https://api.honeybadger.io/v1/deploys"
  smoke:
    machine:
      image: ubuntu-2004:202111-01
    steps:
      - checkout
      - build_test_image
      - run: HEROKU_URL=`heroku apps:info -a $HEROKU_APP_NAME -s | sed -n 's/.*web_url=//p' | sed 's/\/\([^\/]*\)$/\1/'` && docker run --rm -e BASE_URL=$HEROKU_URL -e ADMIN_PASSWORD=$ADMIN_PASSWORD todos-test go test --tags=e2e ./cmd/api
  smoke-aws:
    machine:
      image: ubuntu-2004:202111-01
    steps:
      - checkout
      - build_test_image
      - run: docker run --rm -e BASE_URL=https://$DOMAIN -e ADMIN_PASSWORD=$ADMIN_PASSWORD todos-test go test --tags=e2e ./cmd/api