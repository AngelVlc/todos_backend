version: 2.1

workflows:
    version: 2
    build_and_test:
      jobs:
        - test:
            context:
              - GCLOUD_TODOS
              - ALGOLIA
        - deploy:
            context:
              - GCLOUD_TODOS
              - ALGOLIA
            requires:
              - test
            filters:
              branches:
                only: master
        - smoke:
            requires:
              - deploy
            filters:
              branches:
                only: master

commands:
  configure_gcloud_credentials:
    steps:
    - run: echo 'export GOOGLE_APPLICATION_CREDENTIALS="${PWD}/google_credentials.json"' >> $BASH_ENV
    - run: echo $GCLOUD_SERVICE_KEY > "${GOOGLE_APPLICATION_CREDENTIALS}"
  build_test_image:
    steps:
      - run: docker build --target base -t todos-test src/
  install_terraform:
    steps:
    - run: curl -sLo /tmp/terraform.zip https://releases.hashicorp.com/terraform/1.1.0/terraform_1.1.0_linux_amd64.zip
    - run: unzip /tmp/terraform.zip -d /tmp
    - run: mv /tmp/terraform ~/bin
    - run: export PATH="~/bin:$PATH"
  init_terraform:
    steps:
    - run: cd terraformGc && terraform init -input=false
  plan_or_apply_terraform:
    parameters:
      command:
        description: the terraform command to execute
        type: string
    steps:
    - run: >
        cd terraformGc && terraform <<parameters.command>>
        -var jwt_secret=$JWT_SECRET
        -var cors_allowed_origins=$CORS_ALLOWED_ORIGINS
        -var new_relic_license_key=$NEW_RELIC_LICENSE_KEY
        -var honeybadger_api_key=$HONEYBADGER_API_KEY
        -var app_name=$APP_NAME
        -var gc_project_id=$GCLOUD_PROJECT_ID
        -var mysql_tls=$MYSQL_TLS
        -var mysql_host=$MYSQL_HOST
        -var mysql_database=$MYSQL_DATABASE
        -var mysql_user=$MYSQL_USER
        -var mysql_password=$MYSQL_PASSWORD
        -var delete_expired_refresh_token_interval=$DELETE_EXPIRED_REFRESH_TOKEN_INTERVAL
        -var algolia_app_id=$ALGOLIA_APP_ID
        -var algolia_api_key=$ALGOLIA_API_KEY
  push_image_to_gcr:
    steps:
      - run: docker build --target release -t eu.gcr.io/$GCLOUD_PROJECT_ID/$APP_NAME/release:latest -f src/Dockerfile src/
      - run: gcloud auth configure-docker
      - run: gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS --project=$GCLOUD_PROJECT_ID
      - run: docker push eu.gcr.io/$GCLOUD_PROJECT_ID/$APP_NAME/release:latest
      - run: echo 'export CONTAINER_IMAGE=`docker images --format "{{.Repository}}@{{.Digest}}" --filter "reference=eu.gcr.io/$GCLOUD_PROJECT_ID/$APP_NAME/release"`' >> $BASH_ENV
jobs:
  test:
    machine:
      image: ubuntu-2004:202111-01
    steps:
      - checkout
      - build_test_image
      - run: docker run --rm todos-test go test --race ./...
      - configure_gcloud_credentials
      - install_terraform
      - init_terraform
      - plan_or_apply_terraform:
          command: plan
  deploy:
    machine:
      image: ubuntu-2004:202111-01
    steps:
      - checkout
      - configure_gcloud_credentials
      - install_terraform
      - init_terraform
      - plan_or_apply_terraform:
          command: apply -target=google_project_service.resource_manager -input=false -auto-approve
      - plan_or_apply_terraform:
          command: apply -target=google_project_service.container_registry -input=false -auto-approve
      - push_image_to_gcr
      - plan_or_apply_terraform:
          command: apply -input=false -auto-approve -var container_image=$CONTAINER_IMAGE
      - run: curl --data "deploy[environment]=production&deploy[local_username]=$CIRCLE_PR_USERNAME&deploy[revision]=$(git rev-parse --short HEAD)&api_key=$HONEYBADGER_API_KEY" "https://api.honeybadger.io/v1/deploys"
  smoke:
    machine:
      image: ubuntu-2004:202111-01
    steps:
      - checkout
      - build_test_image
      - run: docker run --rm -e BASE_URL=https://todosbackend.angelbh.es -e ADMIN_PASSWORD=$ADMIN_PASSWORD todos-test go test --tags=e2e ./cmd/api