// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package wire

import (
	"github.com/AngelVlc/todos/internal/api/auth/domain"
	"github.com/AngelVlc/todos/internal/api/auth/infrastructure/repository"
	"github.com/AngelVlc/todos/internal/api/handlers"
	domain2 "github.com/AngelVlc/todos/internal/api/lists/domain"
	repository2 "github.com/AngelVlc/todos/internal/api/lists/infrastructure/repository"
	"github.com/AngelVlc/todos/internal/api/repositories"
	"github.com/AngelVlc/todos/internal/api/server/middlewares/auth"
	"github.com/AngelVlc/todos/internal/api/services"
	"github.com/AngelVlc/todos/internal/api/shared/application"
	"github.com/google/wire"
	"github.com/jinzhu/gorm"
	"os"
)

// Injectors from wire.go:

func InitLogMiddleware() handlers.LogMiddleware {
	logMiddleware := handlers.NewLogMiddleware()
	return logMiddleware
}

func initDefaultAuthMiddleware() middleware.AuthMiddleware {
	osEnvGetter := application.NewOsEnvGetter()
	defaultConfigurationService := application.NewDefaultConfigurationService(osEnvGetter)
	realAuthMiddleware := middleware.NewRealAuthMiddleware(defaultConfigurationService)
	return realAuthMiddleware
}

func initFakeAuthMiddleware() middleware.AuthMiddleware {
	fakeAuthMiddleware := middleware.NewFakeAuthMiddleware()
	return fakeAuthMiddleware
}

func InitRequireAdminMiddleware() handlers.RequireAdminMiddleware {
	defaultRequireAdminMiddleware := handlers.NewDefaultRequireAdminMiddleware()
	return defaultRequireAdminMiddleware
}

func initDefaultRequestCounterMiddleware(db *gorm.DB) handlers.RequestCounterMiddleware {
	defaultCountersService := services.NewDefaultCountersService(db)
	defaultRequestCounterMiddleware := handlers.NewDefaultRequestCounterMiddleware(defaultCountersService)
	return defaultRequestCounterMiddleware
}

func initMockedRequestCounterMiddleware() handlers.RequestCounterMiddleware {
	mockedRequestCounterMiddleware := handlers.NewMockedRequestCounterMiddleware()
	return mockedRequestCounterMiddleware
}

func initDefaultCountersService(db *gorm.DB) services.CountersService {
	defaultCountersService := services.NewDefaultCountersService(db)
	return defaultCountersService
}

func initMockedCountersService() services.CountersService {
	mockedCountersService := services.NewMockedCountersService()
	return mockedCountersService
}

func initDefaultListsService(db *gorm.DB) services.ListsService {
	defaultListsRepository := repositories.NewDefaultListsRepository(db)
	defaultListsService := services.NewDefaultListsService(db, defaultListsRepository)
	return defaultListsService
}

func initMockedListsService() services.ListsService {
	mockedListsService := services.NewMockedListsService()
	return mockedListsService
}

func initDefaultListsRepository(db *gorm.DB) repositories.ListsRepository {
	defaultListsRepository := repositories.NewDefaultListsRepository(db)
	return defaultListsRepository
}

func initMockedListsRepository() repositories.ListsRepository {
	mockedListsRepository := repositories.NewMockedListsRepository()
	return mockedListsRepository
}

func initDefaultListItemsRepository(db *gorm.DB) repositories.ListItemsRepository {
	defaultListItemsRepository := repositories.NewDefaultListItemsRepository(db)
	return defaultListItemsRepository
}

func initMockedListItemsRepository() repositories.ListItemsRepository {
	mockedListItemsRepository := repositories.NewMockedListItemsRepository()
	return mockedListItemsRepository
}

func initDefaultListItemsService(db *gorm.DB) services.ListItemsService {
	defaultListItemsRepository := repositories.NewDefaultListItemsRepository(db)
	defaultListsRepository := repositories.NewDefaultListsRepository(db)
	defaultListItemsService := services.NewDefaultListItemsService(defaultListItemsRepository, defaultListsRepository)
	return defaultListItemsService
}

func initMockedListItemsService() services.ListItemsService {
	mockedListItemsService := services.NewMockedListItemsService()
	return mockedListItemsService
}

func InitConfigurationService() application.ConfigurationService {
	osEnvGetter := application.NewOsEnvGetter()
	defaultConfigurationService := application.NewDefaultConfigurationService(osEnvGetter)
	return defaultConfigurationService
}

func initMockedAuthRepositorySet() domain.AuthRepository {
	mockedAuthRepository := repository.NewMockedAuthRepository()
	return mockedAuthRepository
}

func initMySqlAuthRepository(db *gorm.DB) domain.AuthRepository {
	mySqlAuthRepository := repository.NewMySqlAuthRepository(db)
	return mySqlAuthRepository
}

func initBryptPasswordGenerator() domain.PasswordGenerator {
	bcryptPasswordGenerator := domain.NewBcryptPasswordGenerator()
	return bcryptPasswordGenerator
}

func initMockedPasswordGenerator() domain.PasswordGenerator {
	mockedPasswordGenerator := domain.NewMockedPasswordGenerator()
	return mockedPasswordGenerator
}

func initMockedListsRepositorySetOK() domain2.ListsRepository {
	mockedListsRepository := repository2.NewMockedListsRepository()
	return mockedListsRepository
}

func initMySqlListsRepository(db *gorm.DB) domain2.ListsRepository {
	mySqlListsRepository := repository2.NewMySqlListsRepository(db)
	return mySqlListsRepository
}

// wire.go:

func InitAuthMiddleware(db *gorm.DB) middleware.AuthMiddleware {
	if inTestingMode() {
		return initFakeAuthMiddleware()
	} else {
		return initDefaultAuthMiddleware()
	}
}

func InitRequestCounterMiddleware(db *gorm.DB) handlers.RequestCounterMiddleware {
	if inTestingMode() {
		return initMockedRequestCounterMiddleware()
	} else {
		return initDefaultRequestCounterMiddleware(db)
	}
}

func InitCountersService(db *gorm.DB) services.CountersService {
	if inTestingMode() {
		return initMockedCountersService()
	} else {
		return initDefaultCountersService(db)
	}
}

func InitListsService(db *gorm.DB) services.ListsService {
	if inTestingMode() {
		return initMockedListsService()
	} else {
		return initDefaultListsService(db)
	}
}

func InitListsRepository(db *gorm.DB) repositories.ListsRepository {
	if inTestingMode() {
		return initMockedListsRepository()
	} else {
		return initDefaultListsRepository(db)
	}
}

func InitListItemsRepository(db *gorm.DB) repositories.ListItemsRepository {
	if inTestingMode() {
		return initMockedListItemsRepository()
	} else {
		return initDefaultListItemsRepository(db)
	}
}

func InitListItemsService(db *gorm.DB) services.ListItemsService {
	if inTestingMode() {
		return initMockedListItemsService()
	} else {
		return initDefaultListItemsService(db)
	}
}

func InitAuthRepository(db *gorm.DB) domain.AuthRepository {
	if inTestingMode() {
		return initMockedAuthRepositorySet()
	} else {
		return initMySqlAuthRepository(db)
	}
}

func InitPasswordGenerator() domain.PasswordGenerator {
	if inTestingMode() {
		return initMockedPasswordGenerator()
	} else {
		return initBryptPasswordGenerator()
	}
}

func InitListsRepositoryOK(db *gorm.DB) domain2.ListsRepository {
	if inTestingMode() {
		return initMockedListsRepositorySetOK()
	} else {
		return initMySqlListsRepository(db)
	}
}

func inTestingMode() bool {
	return len(os.Getenv("TESTING")) > 0
}

var EnvGetterSet = wire.NewSet(application.NewOsEnvGetter, wire.Bind(new(application.EnvGetter), new(*application.OsEnvGetter)))

var ConfigurationServiceSet = wire.NewSet(
	EnvGetterSet, application.NewDefaultConfigurationService, wire.Bind(new(application.ConfigurationService), new(*application.DefaultConfigurationService)))

var MockedConfigurationServiceSet = wire.NewSet(application.NewMockedConfigurationService, wire.Bind(new(application.ConfigurationService), new(*application.MockedConfigurationService)))

var ListsServiceSet = wire.NewSet(services.NewDefaultListsService, wire.Bind(new(services.ListsService), new(*services.DefaultListsService)))

var MockedListsServiceSet = wire.NewSet(services.NewMockedListsService, wire.Bind(new(services.ListsService), new(*services.MockedListsService)))

var CountersServiceSet = wire.NewSet(services.NewDefaultCountersService, wire.Bind(new(services.CountersService), new(*services.DefaultCountersService)))

var MockedCountersServiceSet = wire.NewSet(services.NewMockedCountersService, wire.Bind(new(services.CountersService), new(*services.MockedCountersService)))

var RequestCounterMiddlewareSet = wire.NewSet(
	CountersServiceSet, handlers.NewDefaultRequestCounterMiddleware, wire.Bind(new(handlers.RequestCounterMiddleware), new(*handlers.DefaultRequestCounterMiddleware)))

var MockedRequestCounterMiddlewareSet = wire.NewSet(handlers.NewMockedRequestCounterMiddleware, wire.Bind(new(handlers.RequestCounterMiddleware), new(*handlers.MockedRequestCounterMiddleware)))

var AuthMiddlewareSet = wire.NewSet(
	ConfigurationServiceSet, middleware.NewRealAuthMiddleware, wire.Bind(new(middleware.AuthMiddleware), new(*middleware.RealAuthMiddleware)))

var FakeAuthMiddlewareSet = wire.NewSet(middleware.NewFakeAuthMiddleware, wire.Bind(new(middleware.AuthMiddleware), new(*middleware.FakeAuthMiddleware)))

var RequireAdminMiddlewareSet = wire.NewSet(handlers.NewDefaultRequireAdminMiddleware, wire.Bind(new(handlers.RequireAdminMiddleware), new(*handlers.DefaultRequireAdminMiddleware)))

var ListsRepositorySet = wire.NewSet(repositories.NewDefaultListsRepository, wire.Bind(new(repositories.ListsRepository), new(*repositories.DefaultListsRepository)))

var MockedListsRepositorySet = wire.NewSet(repositories.NewMockedListsRepository, wire.Bind(new(repositories.ListsRepository), new(*repositories.MockedListsRepository)))

var ListItemsServiceSet = wire.NewSet(services.NewDefaultListItemsService, wire.Bind(new(services.ListItemsService), new(*services.DefaultListItemsService)))

var MockedListItemsServiceSet = wire.NewSet(services.NewMockedListItemsService, wire.Bind(new(services.ListItemsService), new(*services.MockedListItemsService)))

var ListItemsRepositorySet = wire.NewSet(repositories.NewDefaultListItemsRepository, wire.Bind(new(repositories.ListItemsRepository), new(*repositories.DefaultListItemsRepository)))

var MockedListItemsRepositorySet = wire.NewSet(repositories.NewMockedListItemsRepository, wire.Bind(new(repositories.ListItemsRepository), new(*repositories.MockedListItemsRepository)))

var MySqlAuthRepositorySet = wire.NewSet(repository.NewMySqlAuthRepository, wire.Bind(new(domain.AuthRepository), new(*repository.MySqlAuthRepository)))

var MockedAuthRepositorySet = wire.NewSet(repository.NewMockedAuthRepository, wire.Bind(new(domain.AuthRepository), new(*repository.MockedAuthRepository)))

var BcryptPasswordGeneratorSet = wire.NewSet(domain.NewBcryptPasswordGenerator, wire.Bind(new(domain.PasswordGenerator), new(*domain.BcryptPasswordGenerator)))

var MockedPasswordGeneratorSet = wire.NewSet(domain.NewMockedPasswordGenerator, wire.Bind(new(domain.PasswordGenerator), new(*domain.MockedPasswordGenerator)))

var MySqlListsRepositorySet = wire.NewSet(repository2.NewMySqlListsRepository, wire.Bind(new(domain2.ListsRepository), new(*repository2.MySqlListsRepository)))

var MockedListsRepositorySetOK = wire.NewSet(repository2.NewMockedListsRepository, wire.Bind(new(domain2.ListsRepository), new(*repository2.MockedListsRepository)))
